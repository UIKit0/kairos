List of broken things:
*. Need to update "setup.sh": now it not need to install cardano.
*. In index.html and index-debug.html broken initial background image and progress indication is not exists anymore. Perhaps it is not need.
*. In MailController.j disabled function refreshMailbox (called when user press Refresh button in toolbar). Not implemented porting of "synchronizeAll" function from scala to java. Need make reloading all lists when this button pressed.
*. "Attachments" code for mail content is not ported because it was not worked properly and in future it will be coded in an another way.
*. When web-app started and working, if server restarted, or session is time-outed, web-app remains in non-working state. Expected behavior (one of two): 1) Restart web-app asking user to login 2) Automatically relogin (get new session ID using same previously entered password and email from memory of cappuccino) and make Refresh (update list of folders and mails) (if failed to relogin and get err that authentication failed, show login window). This can be done in "keep-alive" conenction, e.g.Comet, or just on place where will events requested from server every 3 seconds and etc. It can just get info from server in event that it is no authorized anymore and do relogining.

Found bottlenecks:
*. In ImapServiceServlet.java function listMailfolders is makes too much requests to IMAP server to get required attributes (count of messages and etc). Two solutions: 1) Try to find way to load all attributes with one request 2) Make separate functions: load folders list and load folder attributes. Then implement asynchronous folders list loading in GUI: it should load just folder names at first, then near each folder show loading icon and in background load all attributes and replaces loading icon to messages count or to empry place if no unread messages.
*. In whole ImapServiceServlet.java need implement keeping imap connections open, associate each imap connection to users session. This will speedup all requests to imap server. Caveat - for each user will be opened 1 imap connection, this can overload imap server, or imap can reject new connections. (need think). On another side, current realization where each new user create many connections to server and they closing and openting for each request is also not good and imap server also can sometime start to block such traffic.

Ideas
*. How to create attachments: see more comments by Oobe in SMMailUtilJava.java. Base idea: if cappucino can show images from memory, do background downloading of separate attachment (if it is image) and show it. If it not allow this, then save images to cache (data base) and give special URL for each attachements (e.g. /getAttachment?id=123) and integrate it into HTML body as usual img tags to show as mail content in webView in cappuccino.  Also idea: make thumbnails at server, to show it from server to client fast, and then if user request, download attachment fully. (Need to refine requments for this feature).

Notes:
*. Model is simplified. For example SMMailContent.j is not used anymore.
*. To transfer data between client and server JSON format is used. So now no cardano/lift and need to parse json and construct/fill Objj objects manually.

Founded bugs:
*. Failed to rename folder with UTF8 character at smartmobili mail server. When used gmail imap server, everything is works OK. Perhaps some settings at IMAP server is wrong?. It tells that folder is not exists.